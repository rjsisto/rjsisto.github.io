<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="rjsisto.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="rjsisto.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-08T00:40:26+00:00</updated><id>rjsisto.github.io/feed.xml</id><title type="html">blank</title><subtitle>Website about Robert Sisto </subtitle><entry><title type="html">Patient Mapping</title><link href="rjsisto.github.io/blog/2023/patient-mapping/" rel="alternate" type="text/html" title="Patient Mapping"/><published>2023-11-07T00:00:00+00:00</published><updated>2023-11-07T00:00:00+00:00</updated><id>rjsisto.github.io/blog/2023/patient-mapping</id><content type="html" xml:base="rjsisto.github.io/blog/2023/patient-mapping/"><![CDATA[<h2 id="overview">Overview</h2> <p>This post aims to illustrate the differences in the geographic distribution of patients by county from a specific clinic in Northeast Wisconsin. We will use R to both process the data and then create visually appealing and highly-functional maps using the graphing library Plotly.</p> <hr/> <h2 id="wrangling-the-data">Wrangling the Data</h2> <p>In order to create the maps that we want, the data has to be in a format where we can extract the relevant information from it. The original dataset is layed out below.</p> <table> <thead> <tr> <th>Primary Diagnosis</th> <th>All Diagnoses</th> <th>visit_number</th> <th>department</th> <th>appt_date</th> <th>visit_type</th> <th>provider_type</th> <th>gender</th> </tr> </thead> <tbody> <tr> <td>A100</td> <td>[A100, B100, C100]</td> <td>5000000</td> <td>Department One</td> <td>10/29/23</td> <td>follow_up</td> <td>physician</td> <td>male</td> </tr> </tbody> </table> <table> <thead> <tr> <th>age</th> <th>city</th> <th>zip_code</th> <th>county</th> <th>distance</th> <th>lag_days</th> <th>patient_id</th> <th>provider_id</th> </tr> </thead> <tbody> <tr> <td>4.25</td> <td>Green Bay</td> <td>54229</td> <td>Brown</td> <td>10</td> <td>100</td> <td>100-100-1000</td> <td>3</td> </tr> </tbody> </table> <p>As we can see, there are many columns that are irrelevant to our task. The two diagnoses columns, visit_number, department, appt_date, visit_type, provider_type, gender, age, lag_days, and provider_id can all be dropped. Next, we have to group the number of individual patients by zip code.</p> <p>Firstly, we have to only include individual patients, not individual visits. We have to include what each patientâ€™s zip code is, and then find the number of patients by zip code. This can be accomplished in R in one line by using the Tidyverse package.</p> <p><code class="language-plaintext highlighter-rouge">zip.pats = wrangle.pats %&gt;% group_by(patient_id, zip_code) %&gt;% summarise() %&gt;% group_by(zip_code) %&gt;% summarise(n=n())</code></p> <p>The wrangle.pats dataset is the original dataset with the unneeded columns dropped. We first want to group by patient id and their corresponding zip code. Then we can find the sum of all the patients that live in each zip code by grouping by zip code. The resulting dataset is shown below (where <code class="language-plaintext highlighter-rouge">n</code> is the number of patients).</p> <table> <thead> <tr> <th style="text-align: left">zip_code</th> <th style="text-align: right">n</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">48894</td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left">49801</td> <td style="text-align: right">10</td> </tr> <tr> <td style="text-align: left">49802</td> <td style="text-align: right">6</td> </tr> <tr> <td style="text-align: left">49807</td> <td style="text-align: right">2</td> </tr> <tr> <td style="text-align: left">49815</td> <td style="text-align: right">1</td> </tr> <tr> <td style="text-align: left">49821</td> <td style="text-align: right">1</td> </tr> </tbody> </table> <p>Table with patients by Zip Code</p> <p>Next, we have to get the proper county for each zip code. This can be done using <code class="language-plaintext highlighter-rouge">reverse_zipcode()</code> function from the zipcodeR package. This function takes a zip code and returns its state, county, and other relevant information about it. After using this function across the dataset, the proper county is now present in the dataset.</p> <p>Finally, we have to include map data into out dataset so we can properly define the counties in our map. (See next section for what this map data entails). After a simple merge, we can see the final dataset below.</p> <table> <thead> <tr> <th style="text-align: left">county</th> <th style="text-align: left">state</th> <th style="text-align: right">patients</th> <th style="text-align: left">subregion</th> <th style="text-align: left">region</th> <th style="text-align: right">long</th> <th style="text-align: right">lat</th> <th style="text-align: right">group</th> <th style="text-align: right">order</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-86.63122</td> <td style="text-align: right">46.16321</td> <td style="text-align: right">1199</td> <td style="text-align: right">38526</td> </tr> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-87.12396</td> <td style="text-align: right">46.16321</td> <td style="text-align: right">1199</td> <td style="text-align: right">38527</td> </tr> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-87.12969</td> <td style="text-align: right">46.51271</td> <td style="text-align: right">1199</td> <td style="text-align: right">38528</td> </tr> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-87.10677</td> <td style="text-align: right">46.51271</td> <td style="text-align: right">1199</td> <td style="text-align: right">38529</td> </tr> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-87.06094</td> <td style="text-align: right">46.52417</td> <td style="text-align: right">1199</td> <td style="text-align: right">38530</td> </tr> <tr> <td style="text-align: left">Alger County</td> <td style="text-align: left">MI</td> <td style="text-align: right">1</td> <td style="text-align: left">alger</td> <td style="text-align: left">michigan</td> <td style="text-align: right">-87.02083</td> <td style="text-align: right">46.53563</td> <td style="text-align: right">1199</td> <td style="text-align: right">38531</td> </tr> </tbody> </table> <p>Full Dataset with Map and Patient Data</p> <hr/> <h2 id="mapping-the-data">Mapping the Data</h2> <p>We can use the <code class="language-plaintext highlighter-rouge">map_data</code> function from ggplot to get the required county data for creating our maps. Looking at where the patients come from in the dataset, we can see that they either come from Wisconsin or the Upper Penninsula of Michigan. (There is one patient that comes from Alaska, but this is an outlier that we do not need to show in our map). Now getting all of the counties from Wisconsin is pretty easy using Tidyverse. But in order to get just the Michigan counties from the UP (Upper Penninsula), we have to first specify which counties are located in the UP. After this is done, we can then create a base map of just Wisconsin and the UP with their respective county outlines. (All code can be seen below in the appendix). This map can be seen below.</p> <p><img src="/assets/map_post_files/figure-gfm/unnamed-chunk-3-1.png" alt=""/></p> <p>After our map of the required counties is created, we can then apply our patient data to this map to gain some insight into where the patients are coming from. This map can be seen below.</p> <p><img src="/assets/map_post_files/figure-gfm/unnamed-chunk-4-1.png" alt=""/></p> <p>Something to note is that we used a rainbow color scheme in order to more easily differentiate the numbers of patients from each county. A log10 was also used in order to more clearly show the differences between the number of patients coming from each county.</p> <p>Finally, we can quite easily create an interactive plotly map using single line of code. <code class="language-plaintext highlighter-rouge">county.plotly = ggplotly(county.ggplot, tooltip="text")</code> We can see the results of this below.</p> <div class="l-page"> <iframe src="/assets/map_post_files/plotly/countyPlotly.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <hr/> <h3 id="plotting-different-types-of-patients">Plotting Different Types of Patients</h3> <p>The clinic sees two different types of patients which could be mapped out separately. Using the same method outlined above, we can map the two patient types separately by using datasets that only include the specific type of patient we are looking for. Two plotly plots for both types of patients can be seen below</p> <div class="l-page"> <iframe src="/assets/map_post_files/plotly/sidebyside.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <hr/> <h2 id="conclusions">Conclusions</h2> <p>In conclusion, we were able to use R to transform the clinic data into usable map data in order to map where the clinics patients are coming from. In doing so, we were able to gain some valuable insights into how far some patients were willing to travel, where other similar clinics may be located, and where new possible clinics could spring up. In regards to what future work could be done, more maps would be created based on other factors that were not included in this post, such as gender, age, etcâ€¦ We could also look into doing some modeling on distance from the clinic and whether patients are not coming regularly based on the distance they have travel. These and other analyses can be done in order to get more valuable insight into how to best improve the wellbeing and care for the patients of this particular clinic.</p> <hr/> <h2 id="appendix">Appendix</h2> <h3 id="source-code">Source Code</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"data/pat_data.csv"</span><span class="p">)</span><span class="w">
</span><span class="n">knitr</span><span class="o">::</span><span class="n">opts_chunk</span><span class="o">$</span><span class="n">set</span><span class="p">(</span><span class="n">include</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">zipcodeR</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">plotly</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">htmlwidgets</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">knitr</span><span class="p">)</span><span class="w">
</span><span class="n">wrangle.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">new.pats</span><span class="p">,</span><span class="w"> </span><span class="n">select</span><span class="o">=-</span><span class="nf">c</span><span class="p">(</span><span class="n">prim_diag</span><span class="p">,</span><span class="w"> </span><span class="n">visit_number</span><span class="p">,</span><span class="w"> </span><span class="n">department</span><span class="p">,</span><span class="w"> </span><span class="n">appt_date</span><span class="p">,</span><span class="w"> </span><span class="n">visit_type</span><span class="p">,</span><span class="w"> </span><span class="n">provider_type</span><span class="p">,</span><span class="w"> </span><span class="n">gender</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">lag_days</span><span class="p">,</span><span class="w"> </span><span class="n">provider_id</span><span class="p">,</span><span class="w"> </span><span class="n">new_patient</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">wrangle.pats</span><span class="o">$</span><span class="n">zip_code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">wrangle.pats</span><span class="o">$</span><span class="n">zip_code</span><span class="p">)</span><span class="w">

</span><span class="c1">#getting the data in a format that has the zip code and the number of patients per zip code</span><span class="w">
</span><span class="n">zip.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wrangle.pats</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">patient_id</span><span class="p">,</span><span class="w"> </span><span class="n">zip_code</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">summarise</span><span class="p">()</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">  </span><span class="n">group_by</span><span class="p">(</span><span class="n">zip_code</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">summarise</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">())</span><span class="w">

</span><span class="c1">#does the same as above but includes patient type as well - NOT DONE YET</span><span class="w">
</span><span class="n">zip.type.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">wrangle.pats</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">patient_id</span><span class="p">,</span><span class="w"> </span><span class="n">zip_code</span><span class="p">,</span><span class="w"> </span><span class="n">patient_type</span><span class="p">,</span><span class="w"> </span><span class="n">.name_repair</span><span class="o">=</span><span class="s2">"minimal"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">summarise</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">())</span><span class="w">
</span><span class="c1">#creating two datasets for patient type and their corresponding zip code</span><span class="w">
</span><span class="n">zip.one.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">zip.type.pats</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">patient_type</span><span class="o">==</span><span class="s2">"one"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">zip_code</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">summarise</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">())</span><span class="w">
</span><span class="n">zip.two.pats</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">zip.type.pats</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">patient_type</span><span class="o">==</span><span class="s2">"two"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">zip_code</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">summarise</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">())</span><span class="w">

</span><span class="c1">#using the county data to create a map of wisconsin and the UP</span><span class="w">
</span><span class="n">counties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">map_data</span><span class="p">(</span><span class="s2">"county"</span><span class="p">)</span><span class="w">

</span><span class="c1">#TODO maybe put these counties in a config file</span><span class="w">
</span><span class="n">up.counties</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"alger"</span><span class="p">,</span><span class="w"> </span><span class="s2">"baraga"</span><span class="p">,</span><span class="w"> </span><span class="s2">"chippewa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"delta"</span><span class="p">,</span><span class="w"> </span><span class="s2">"dickinson"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gogebic"</span><span class="p">,</span><span class="w"> </span><span class="s2">"houghton"</span><span class="p">,</span><span class="w"> </span><span class="s2">"iron"</span><span class="p">,</span><span class="w"> </span><span class="s2">"keweenaw"</span><span class="p">,</span><span class="w"> </span><span class="s2">"luce"</span><span class="p">,</span><span class="w"> </span><span class="s2">"mackinac"</span><span class="p">,</span><span class="w"> </span><span class="s2">"marquette"</span><span class="p">,</span><span class="w"> </span><span class="s2">"menominee"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ontonagon"</span><span class="p">,</span><span class="w"> </span><span class="s2">"schoolcraft"</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">middie</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counties</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">region</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"wisconsin"</span><span class="p">)</span><span class="w">
</span><span class="n">up</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counties</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">region</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"michigan"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">filter</span><span class="p">(</span><span class="n">subregion</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">up.counties</span><span class="p">)</span><span class="w">

</span><span class="n">middie</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">middie</span><span class="p">,</span><span class="w"> </span><span class="n">up</span><span class="p">)</span><span class="w">

</span><span class="c1">#base map of wisconsin and the up to be used to map the patient data on top of</span><span class="w">
</span><span class="n">region</span><span class="o">=</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">middie</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">group</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_polygon</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">coord_fixed</span><span class="p">(</span><span class="m">1.3</span><span class="p">)</span><span class="w">

</span><span class="c1">#example plot of wisconsin and UP counties</span><span class="w">
</span><span class="n">wisc.up.map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">middie</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_polygon</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">group</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">coord_fixed</span><span class="p">(</span><span class="m">1.3</span><span class="p">)</span><span class="w">
</span><span class="c1">#TODO will want a better solution for state codes than just hard coding the used ones in</span><span class="w">
</span><span class="n">state.codes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"WI"</span><span class="o">=</span><span class="s2">"wisconsin"</span><span class="p">,</span><span class="w"> </span><span class="s2">"MI"</span><span class="o">=</span><span class="s2">"michigan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"AK"</span><span class="o">=</span><span class="s2">"alaska"</span><span class="p">)</span><span class="w">

</span><span class="c1">#creating a function that inputs zip codes and the patients per zip code and then outputs a ggplot object that shows a map of the patients and where they are from</span><span class="w">
</span><span class="c1">#full.data is a bool which also returns the full dataset</span><span class="w">
</span><span class="n">to.map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span><span class="w"> </span><span class="n">full.data</span><span class="o">=</span><span class="nb">F</span><span class="p">){</span><span class="w">
  </span><span class="c1">#creating a new dataset with all the zipcode information and then grouping the patients by the county in which they live</span><span class="w">
  </span><span class="n">county.data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dataset</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">reverse_zipcode</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">zip_code</span><span class="p">)))</span><span class="w">
  </span><span class="n">county.data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">county.data</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">county</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">count</span><span class="p">(</span><span class="n">county</span><span class="p">,</span><span class="w"> </span><span class="n">wt</span><span class="o">=</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="o">=</span><span class="s2">"patients"</span><span class="p">)</span><span class="w">
  </span><span class="c1">#changing some of the columns formats so that they can be mapped later</span><span class="w">
  </span><span class="n">county.data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">county.data</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">subregion</span><span class="o">=</span><span class="w"> </span><span class="n">str_split_1</span><span class="p">(</span><span class="n">tolower</span><span class="p">(</span><span class="n">county</span><span class="p">),</span><span class="w"> </span><span class="s2">" county"</span><span class="p">)[</span><span class="m">1</span><span class="p">])</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">region</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state.codes</span><span class="p">[</span><span class="n">state</span><span class="p">])</span><span class="w">
  </span><span class="c1">#creating full dataset used to create the county map by joining the dataset</span><span class="w">
  </span><span class="n">county.map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">full_join</span><span class="p">(</span><span class="n">county.data</span><span class="p">,</span><span class="w"> </span><span class="n">middie</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"region"</span><span class="p">,</span><span class="w"> </span><span class="s2">"subregion"</span><span class="p">))</span><span class="w">
  </span><span class="c1">#creates a ggplot objects which shows a map of where the patients are coming from</span><span class="w">
  </span><span class="n">county.ggplot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">region</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_polygon</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">county.map</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="n">patients</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="o">=</span><span class="n">paste0</span><span class="p">(</span><span class="n">subregion</span><span class="p">,</span><span class="w"> </span><span class="s1">'\n'</span><span class="p">,</span><span class="w"> </span><span class="s2">"Visits: "</span><span class="p">,</span><span class="w"> </span><span class="n">patients</span><span class="p">)),</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">scale_fill_gradientn</span><span class="p">(</span><span class="n">colours</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rev</span><span class="p">(</span><span class="n">rainbow</span><span class="p">(</span><span class="m">7</span><span class="p">)),</span><span class="w"> </span><span class="n">trans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"log10"</span><span class="p">)</span><span class="w">
  </span><span class="k">if</span><span class="p">(</span><span class="n">full.data</span><span class="p">){</span><span class="w">
    </span><span class="nf">return</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">county.ggplot</span><span class="p">,</span><span class="w"> </span><span class="n">county.map</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w">
    </span><span class="nf">return</span><span class="p">(</span><span class="n">county.ggplot</span><span class="p">)</span><span class="w">
  </span><span class="p">}}</span><span class="w">

</span><span class="n">cc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">to.map</span><span class="p">(</span><span class="n">zip.pats</span><span class="p">,</span><span class="w"> </span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="n">county.ggplot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cc</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="w">
</span><span class="n">county.data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cc</span><span class="p">[[</span><span class="m">2</span><span class="p">]]</span><span class="w">
</span><span class="n">county.one.map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">to.map</span><span class="p">(</span><span class="n">zip.one.pats</span><span class="p">)</span><span class="w">
</span><span class="n">county.two.map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">to.map</span><span class="p">(</span><span class="n">zip.two.pats</span><span class="p">)</span><span class="w">
</span><span class="n">county.plotly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggplotly</span><span class="p">(</span><span class="n">county.ggplot</span><span class="p">,</span><span class="w"> </span><span class="n">tooltip</span><span class="o">=</span><span class="s2">"text"</span><span class="p">)</span><span class="w">

</span><span class="n">county.one.plotly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggplotly</span><span class="p">(</span><span class="n">county.one.map</span><span class="p">,</span><span class="w"> </span><span class="n">tooltip</span><span class="o">=</span><span class="s2">"text"</span><span class="p">)</span><span class="w">
</span><span class="n">county.two.plotly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ggplotly</span><span class="p">(</span><span class="n">county.two.map</span><span class="p">,</span><span class="w"> </span><span class="n">tooltip</span><span class="o">=</span><span class="s2">"text"</span><span class="p">)</span><span class="w">

</span><span class="c1">#side-by-side plot for both patient types by visits per county</span><span class="w">
</span><span class="n">side.by.side.plotly</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">subplot</span><span class="p">(</span><span class="n">county.one.plotly</span><span class="p">,</span><span class="w"> </span><span class="n">county.two.plotly</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">layout</span><span class="p">(</span><span class="n">annotations</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
 </span><span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.02</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.05</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Visits Per County for Patient Type 1"</span><span class="p">,</span><span class="w"> </span><span class="n">showarrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">xref</span><span class="o">=</span><span class="s1">'paper'</span><span class="p">,</span><span class="w"> </span><span class="n">yref</span><span class="o">=</span><span class="s1">'paper'</span><span class="p">),</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.95</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.05</span><span class="p">,</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Visits Per County for Patient Type 2"</span><span class="p">,</span><span class="w"> </span><span class="n">showarrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">xref</span><span class="o">=</span><span class="s1">'paper'</span><span class="p">,</span><span class="w"> </span><span class="n">yref</span><span class="o">=</span><span class="s1">'paper'</span><span class="p">))</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1">#writing the ploly maps to a file</span><span class="w">
</span><span class="n">saveWidget</span><span class="p">(</span><span class="n">county.plotly</span><span class="p">,</span><span class="w"> </span><span class="s2">"countyPlotly.html"</span><span class="p">)</span><span class="w">
</span><span class="n">saveWidget</span><span class="p">(</span><span class="n">side.by.side.plotly</span><span class="p">,</span><span class="w"> </span><span class="s2">"sidebyside.html"</span><span class="p">)</span><span class="w">
</span><span class="n">kable</span><span class="p">(</span><span class="n">head</span><span class="p">(</span><span class="n">zip.pats</span><span class="p">),</span><span class="w"> </span><span class="n">format</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"markdown"</span><span class="p">,</span><span class="w"> </span><span class="n">caption</span><span class="o">=</span><span class="s2">"Table with patients by Zip Code"</span><span class="p">)</span><span class="w">
</span><span class="n">kable</span><span class="p">(</span><span class="n">head</span><span class="p">(</span><span class="n">county.data</span><span class="p">),</span><span class="w"> </span><span class="n">format</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"markdown"</span><span class="p">,</span><span class="w"> </span><span class="n">caption</span><span class="o">=</span><span class="s2">"Full Dataset with Map and Patient Data"</span><span class="p">)</span><span class="w">
</span><span class="n">wisc.up.map</span><span class="w">
</span><span class="n">county.ggplot</span><span class="w">
</span><span class="n">sessionInfo</span><span class="p">()</span><span class="w">
</span></code></pre></div></div> <h3 id="r-session-information">R Session Information</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sessionInfo</span><span class="p">()</span><span class="w">
</span></code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## R version 4.3.2 (2023-10-31)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: EndeavourOS
##
## Matrix products: default
## BLAS:   /usr/lib/libblas.so.3.11.0
## LAPACK: /usr/lib/liblapack.so.3.11.0
##
## locale:
##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
##
## time zone: America/Chicago
## tzcode source: system (glibc)
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## other attached packages:
##  [1] knitr_1.45        htmlwidgets_1.6.2 plotly_4.10.3     zipcodeR_0.3.5
##  [5] lubridate_1.9.3   forcats_1.0.0     stringr_1.5.0     dplyr_1.1.3
##  [9] purrr_1.0.2       readr_2.1.4       tidyr_1.3.0       tibble_3.2.1
## [13] ggplot2_3.4.4     tidyverse_2.0.0
##
## loaded via a namespace (and not attached):
##  [1] gtable_0.3.4       raster_3.6-26      xfun_0.41          tigris_2.0.4
##  [5] lattice_0.22-5     tzdb_0.4.0         crosstalk_1.2.0    vctrs_0.6.4
##  [9] tools_4.3.2        generics_0.1.3     curl_5.1.0         proxy_0.4-27
## [13] fansi_1.0.5        RSQLite_2.3.3      highr_0.10         blob_1.2.4
## [17] pkgconfig_2.0.3    KernSmooth_2.23-22 data.table_1.14.8  uuid_1.1-1
## [21] lifecycle_1.0.3    farver_2.1.1       compiler_4.3.2     munsell_0.5.0
## [25] terra_1.7-55       codetools_0.2-19   maps_3.4.1.1       htmltools_0.5.7
## [29] class_7.3-22       lazyeval_0.2.2     yaml_2.3.7         pillar_1.9.0
## [33] crayon_1.5.2       ellipsis_0.3.2     classInt_0.4-10    cachem_1.0.8
## [37] tidyselect_1.2.0   rvest_1.0.3        digest_0.6.33      stringi_1.7.12
## [41] sf_1.0-14          labeling_0.4.3     fastmap_1.1.1      grid_4.3.2
## [45] colorspace_2.1-0   cli_3.6.1          magrittr_2.0.3     utf8_1.2.4
## [49] e1071_1.7-13       withr_2.5.2        scales_1.2.1       rappdirs_0.3.3
## [53] sp_2.1-1           bit64_4.0.5        timechange_0.2.0   rmarkdown_2.25
## [57] httr_1.4.7         bit_4.0.5          hms_1.1.3          memoise_2.0.1
## [61] evaluate_0.23      viridisLite_0.4.2  rlang_1.1.2        Rcpp_1.0.11
## [65] glue_1.6.2         DBI_1.1.3          xml2_1.3.5         rstudioapi_0.15.0
## [69] jsonlite_1.8.7     R6_2.5.1           tidycensus_1.5     units_0.8-4
</code></pre></div></div>]]></content><author><name></name></author><category term="maps,"/><category term="R,"/><category term="plotly,"/><category term="ggplot"/><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Predicting Productivity In Warehouses</title><link href="rjsisto.github.io/blog/2023/warehouse_productivity/" rel="alternate" type="text/html" title="Predicting Productivity In Warehouses"/><published>2023-10-29T00:00:00+00:00</published><updated>2023-10-29T00:00:00+00:00</updated><id>rjsisto.github.io/blog/2023/warehouse_productivity</id><content type="html" xml:base="rjsisto.github.io/blog/2023/warehouse_productivity/"><![CDATA[<h2 id="predicting-warehouse-productivity">Predicting Warehouse Productivity</h2> <div class="l-page"> <iframe src="/assets/html/report_1.html" frameborder="0" scrolling="yes" height="800px" width="100%" style="border: 1px dashed grey;"></iframe> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[project made to predict the productivity of warehouse workers]]></summary></entry></feed>